

Title of Section: Numbers, Expressions, Simple Programs

This Section introduces basics concepts.


2.1 Numbers and Arithmetic

Starts with a simple presentation of the widely known number classes, which are used in Scheme:
	- positives
	- negatives
	- rationals
	- irrationals
Examples of each:
	Positive: 1
	Negative: -1
	Rational: 3/4
	Irrational: #i1.7320508075688772 ( An irrational number have this '#i' in front)
	

Are presented arithmetic operations and some advanced mathematical operations used in Scheme.

Scheme use prefix notation, the syntax to call an operation is that:
(operation A ... B)

In parentheses as they are called, soon after their meaning, and an example
Arithmetics operators:
	- (+) Addition
	- (-) Subtraction
	- (*) Multiplication
	- (/) Division

Advanced mathematical operations :
	- (sqrt) Square Root
	- (expt) Exponentiation
	- (remainder) Remainder of Division
	- (log) Natural Logarithm
	- (sin) Sine 
	- (tan) Tangent 
	- (max) Maximun 

examples of use:
   (+ 1 1)
 = 2

   (- 3 2)
 = 1
 
   (max 5 7)
 = 7

some operations binary can use more of two numbers
   (+ 1 2 3 4 5 6)
 = 21

   (max 1 2 3 4 5 6)
 = 6

In the case of operation be binary, can use more of two numbers, and not have commutative property, 
then the operation will behave that form:
   (/ 24 2 3 4)
 = (/ 12 3 4)
 = (/ 4 4)
 = 1

This list does not have all operations which Scheme have, these are some operations.


Is possible create expression combinating the operations:
   (* (+ 1 2) (+ 2 3) )
 = (* 3 (+ 2 3) )
 = (* 3 5)
 = 15
 
   (/ (max 8 10) (max 4 5) )
 = (/ 10 5 )
 = 2


Is necessary caution when working with irrational numbers, because results of operations with them can return imprecises results:
   (- #i1000.0 #i999.9)
 = #i0.10000000000002274
 



2.2 Variables and Programs


Variable is a placeholder that stands for an unknown quantity. For examples:

the square of a number S is S².

S is a variable, with an unknown value, but is possible apply a rule.
S² is a rule.

this rule is called expression. if S is replaced with a number, the expression resulting in a number.

for example, if replace S with 5, the expression S² resulting is 5², which resulting in 25.

Programs are rules which tell how computes a data and produces data.
Large programs are smalls programs combined in some manner.

An example of a program:

(define (square-area length)
  (* length length)
)

this program receives an INPUT, the length, and return an OUTPUT, the area of a square.
the action of assigning a number like an input to the program is called APPLY.
example APPLY 5 to square-area :
   (square-area 5)
 = (* 5 5)
 = 25
 

many programs have more of one INPUT, for example, programs to sum the area of two squares, given the length of the two

(define (sum-two-squares-areas firstLength secondLength)
  (+ (square-area firstLength) (square-area secondLength))
)

example APPLY 3 and 4 to sum-two-squares-areas:
   (sum-two-squares-areas 3 4)
 = (+ (square-area 3) (square-area 4))
 = (+ 9 16)
 = 25



2.3 Word Problems

not always the programs come in the format of expression mathematics. He comes in a problem and the programmer should extract the relevant information 
and formulate appropriate expressions.

example:

A book Store created a promotion which, in buying the three books of a trilogy like for example lord of the rings, 
the book of minor value is free. Create a Program to automatics this promotion.

then the program is:

(define (three-books-promotion firstBooks secondBook thirdBook)
  (- (+ firstBook secondBook thirdBook) (min firstBook secondBook thirdBook) )
)



2.4 Errors

Variables and numbers are expressions ATOMIC.
examples of expressions ATOMIC:
	length
	10
	(* 2 7) this is an ATOMIC because return a number
	
	
but have an another type of expressions, COMPOUND.

COMPOUND have a syntax well defined:

(define (f x ... y)
  an-expression)

``('', the word ``define'', ``('', a non-empty sequence of names separated by spaces, ``)'', an expression, and a closing ``)''

the sequence of names introduce the name of expression and its parameters


when that syntax defined not is respected, Scheme throws a Syntax Error:
examples of definitions bad formed:


the problem of this definition following is because the length is parenthesized, Scheme expects a function after the open parenthesis.
(define (square length)
  (expt (length) 2)
)


the problem of this definition following is because have two ATOMIC expressions.
(define (square length) 
  length 2)


have others Syntax Errors, these are examples.



Another type of error is Run-Time Errors, these errors are thrown when the expression has a problem that is not syntactic,
For example, the expression goes against an intuitive law of algebra, receives more or fewer parameters than it was designed, 
the expression is called, but it has not been defined

In other words, the error is in the use of the expression and not in its definition.

examples:
the expression goes against an intuitive law of algebra, in algebra not exist division by zero

(define (division-by-zero number)
  (/ number 0)
)

(division-by-zero 10)


receives more parameters than it was designed

(define (square-of-number number)
  (expt number 2)
)

(square-of-number 10 5)

receives fewer parameters than it was designed

(define (mean-of-two-numbers firstNumber secondNumber)
  (/ (+ firstNumber secondNumber) 2 )
)

(mean-of-two-numbers 10)


the expression is called, but it has not been defined

(mean-of-three-numbers 5 10 15)




Beyond Syntax and Run-time, exist the Logical Errors. Are errors of the Programmers. Not are detected by Scheme.
Logical Errors are when programs compute incorrect results.

example:
in the definition of the square of a number was used 3 like exponent, and not 2. then the definition:

(define (square-of-number number)
  (expt number 3)
)

the name is square-of-number, but the result is the cube. this is a Logical Error, the program is computing incorrect results.





2.5 Designing Programs

Design Recipe is a step-by-step prescription to bring order to development of a program.
these steps show what we should do and the order in which we should do things. 
This makes the program understandable and makes it easier to know where errors occur,
what auxiliary programs do, and so on.

the steps are:
	- Contract
	- Purpose
	- Header
	- Examples
	- Body
	- Tests
	

Contract: It is the definition of the name of a program, the type of input(s), and the type of output.
the syntax of Contract is the name of the program, colons to separate, the type of each input separated by one space, 
an arrow to separate input of output, the type of output.

example:
;; mean-of-two-numbers: number number -> number

	
Purpose: It is a comment explaining what program do. have no syntax 
specified, but the purpose is the place to explain the input(s), and the output.

an example of a purpose to mean-of-two-numbers:
;; determines the mean of two numbers, given the two numbers.


Program Examples: are examples of the use of the program. given the input, the output expected.
examples:
;; the numbers are 0 and 0, then the mean is 0
;; the numbers are 0 and 10, then the mean is 5
;; the numbers are 5 and 10, then the mean is 7.5


Definition: It has two parts, the header, and the body. is the part of 
the recipe which is really interpreted by the Scheme, the others up to now are comments.

header: defines the name of the program which will go interpreted by the Scheme, and the names of input(s).
example: 
(define (mean-of-two-numbers firstNumber secondNumber) ...)

body: is the expression to will go computing.
example:
(/ (+ firstNumber secondNumber) 2 )

uniting header and body:
(define (mean-of-two-numbers firstNumber secondNumber)
  (/ (+ firstNumber secondNumber) 2)
)


Tests: are the checks if the program works as in Programs Examples. Avoiding logical errors.
(mean-of-two-numbers 0 0)  "should be" 0
(mean-of-two-numbers 0 10) "should be" 5
(mean-of-two-numbers 5 10) "should be" 7.5


Uniting all:

;; mean-of-two-numbers: number number -> number
;; determines the mean of two numbers, given the two numbers.

;; EXAMPLES
;; the numbers are 0 and 0, then the mean is 0
;; the numbers are 0 and 10, then the mean is 5
;; the numbers are 5 and 10, then the mean is 7.5

(define (mean-of-two-numbers firstNumber secondNumber)
  (/ (+ firstNumber secondNumber) 2)
)

;; TESTS
(mean-of-two-numbers 0 0)  "should be" 0
(mean-of-two-numbers 0 10) "should be" 5
(mean-of-two-numbers 5 10) "should be" 7.5


Design Recipe is not a magic bullet, is only a guidance.

